/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/matches/{match_id}": {
    /** Match data */
    get: {
      parameters: {
        path: {
          match_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description The ID number of the match assigned by Valve */
            match_id?: number;
            /** @description Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game. */
            barracks_status_dire?: number;
            /** @description Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game. */
            barracks_status_radiant?: number;
            /** @description Array containing information on the chat of the game */
            chat?: {
              /** @description Time in seconds at which the message was said */
              time?: number;
              /** @description Name of the player who sent the message */
              unit?: string;
              /** @description The message the player sent */
              key?: string;
              /** @description slot */
              slot?: number;
              /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
              player_slot?: number;
            }[];
            /** @description cluster */
            cluster?: number;
            /** @description cosmetics */
            cosmetics?: { [key: string]: unknown };
            /** @description Final score for Dire (number of kills on Radiant) */
            dire_score?: number;
            /** @description draft_timings */
            draft_timings?: {
              /** @description order */
              order?: number;
              /** @description pick */
              pick?: boolean;
              /** @description active_team */
              active_team?: number;
              /** @description The ID value of the hero played */
              hero_id?: number;
              /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
              player_slot?: number;
              /** @description extra_time */
              extra_time?: number;
              /** @description total_time_taken */
              total_time_taken?: number;
            }[];
            /** @description Duration of the game in seconds */
            duration?: number;
            /** @description engine */
            engine?: number;
            /** @description Time in seconds at which first blood occurred */
            first_blood_time?: number;
            /** @description Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
            game_mode?: number;
            /** @description Number of human players in the game */
            human_players?: number;
            /** @description leagueid */
            leagueid?: number;
            /** @description Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
            lobby_type?: number;
            /** @description match_seq_num */
            match_seq_num?: number;
            /** @description Number of negative votes the replay received in the in-game client */
            negative_votes?: number;
            /** @description objectives */
            objectives?: { [key: string]: unknown };
            /** @description Object containing information on the draft. Each pick/ban contains a boolean relating to whether the choice is a pick or a ban, the hero ID, the team the picked or banned it, and the order. */
            picks_bans?: { [key: string]: unknown };
            /** @description Number of positive votes the replay received in the in-game client */
            positive_votes?: number;
            /** @description Array of the Radiant gold advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their gold disadvantage. */
            radiant_gold_adv?: { [key: string]: unknown };
            /** @description Final score for Radiant (number of kills on Radiant) */
            radiant_score?: number;
            /** @description Boolean indicating whether Radiant won the match */
            radiant_win?: boolean;
            /** @description Array of the Radiant experience advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their experience disadvantage. */
            radiant_xp_adv?: { [key: string]: unknown };
            /** @description The Unix timestamp at which the game started */
            start_time?: number;
            /** @description teamfights */
            teamfights?: { [key: string]: unknown };
            /** @description Bitmask. An integer that represents a binary of which Dire towers are still standing. */
            tower_status_dire?: number;
            /** @description Bitmask. An integer that represents a binary of which Radiant towers are still standing. */
            tower_status_radiant?: number;
            /** @description Parse version, used internally by OpenDota */
            version?: number;
            /** @description replay_salt */
            replay_salt?: number;
            /** @description series_id */
            series_id?: number;
            /** @description series_type */
            series_type?: number;
            /** @description radiant_team */
            radiant_team?: { [key: string]: unknown };
            /** @description dire_team */
            dire_team?: { [key: string]: unknown };
            /** @description league */
            league?: { [key: string]: unknown };
            /** @description Skill bracket assigned by Valve (Normal, High, Very High) */
            skill?: number;
            /** @description Array of information on individual players */
            players?: {
              /** @description Match ID */
              match_id?: number;
              /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
              player_slot?: number;
              /** @description An array describing how abilities were upgraded */
              ability_upgrades_arr?: number[];
              /** @description Object containing information on how many times the played used their abilities */
              ability_uses?: { [key: string]: unknown };
              /** @description Object containing information on who the player used their abilities on */
              ability_targets?: { [key: string]: unknown };
              /** @description Object containing information on how and how much damage the player dealt to other heroes */
              damage_targets?: { [key: string]: unknown };
              /** @description account_id */
              account_id?: number;
              /** @description Object containing information on how many and what type of actions the player issued to their hero */
              actions?: { [key: string]: unknown };
              /** @description Object containing information on additional units the player had under their control */
              additional_units?: { [key: string]: unknown };
              /** @description Number of assists the player had */
              assists?: number;
              /** @description Item in backpack slot 0 */
              backpack_0?: number;
              /** @description Item in backpack slot 1 */
              backpack_1?: number;
              /** @description Item in backpack slot 2 */
              backpack_2?: number;
              /** @description Array containing information about buybacks */
              buyback_log?: {
                /** @description Time in seconds the buyback occurred */
                time?: number;
                /** @description slot */
                slot?: number;
                /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
                player_slot?: number;
              }[];
              /** @description Number of camps stacked */
              camps_stacked?: number;
              /** @description Array containing information about the player's disconnections and reconnections */
              connection_log?: {
                /** @description Game time in seconds the event ocurred */
                time?: number;
                /** @description Event that occurred */
                event?: string;
                /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
                player_slot?: number;
              }[];
              /** @description Number of creeps stacked */
              creeps_stacked?: number;
              /** @description Object containing information about damage dealt by the player to different units */
              damage?: { [key: string]: unknown };
              /** @description Object containing information about about the sources of this player's damage to heroes */
              damage_inflictor?: { [key: string]: unknown };
              /** @description Object containing information about the sources of damage received by this player from heroes */
              damage_inflictor_received?: { [key: string]: unknown };
              /** @description Object containing information about from whom the player took damage */
              damage_taken?: { [key: string]: unknown };
              /** @description Number of deaths */
              deaths?: number;
              /** @description Number of denies */
              denies?: number;
              /** @description Array containing number of denies at different times of the match */
              dn_t?: number[];
              /** @description Gold at the end of the game */
              gold?: number;
              /** @description Gold Per Minute obtained by this player */
              gold_per_min?: number;
              /** @description Object containing information on how the player gainined gold over the course of the match */
              gold_reasons?: { [key: string]: unknown };
              /** @description How much gold the player spent */
              gold_spent?: number;
              /** @description Array containing total gold at different times of the match */
              gold_t?: number[];
              /** @description Hero Damage Dealt */
              hero_damage?: number;
              /** @description Hero Healing Done */
              hero_healing?: number;
              /** @description Object containing information on how many ticks of damages the hero inflicted with different spells and damage inflictors */
              hero_hits?: { [key: string]: unknown };
              /** @description The ID value of the hero played */
              hero_id?: number;
              /** @description Item in the player's first slot */
              item_0?: number;
              /** @description Item in the player's second slot */
              item_1?: number;
              /** @description Item in the player's third slot */
              item_2?: number;
              /** @description Item in the player's fourth slot */
              item_3?: number;
              /** @description Item in the player's fifth slot */
              item_4?: number;
              /** @description Item in the player's sixth slot */
              item_5?: number;
              /** @description Object containing information about how many times a player used items */
              item_uses?: { [key: string]: unknown };
              /** @description Object containing information about the player's killstreaks */
              kill_streaks?: { [key: string]: unknown };
              /** @description Object containing information about what units the player killed */
              killed?: { [key: string]: unknown };
              /** @description Object containing information about who killed the player */
              killed_by?: { [key: string]: unknown };
              /** @description Number of kills */
              kills?: number;
              /** @description Array containing information on which hero the player killed at what time */
              kills_log?: {
                /** @description Time in seconds the player killed the hero */
                time?: number;
                /** @description Hero killed */
                key?: string;
              }[];
              /** @description Object containing information on lane position */
              lane_pos?: { [key: string]: unknown };
              /** @description Number of last hits */
              last_hits?: number;
              /** @description Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
              leaver_status?: number;
              /** @description Level at the end of the game */
              level?: number;
              /** @description Array describing last hits at each minute in the game */
              lh_t?: number[];
              /** @description life_state */
              life_state?: { [key: string]: unknown };
              /** @description Object with information on the highest damage instance the player inflicted */
              max_hero_hit?: { [key: string]: unknown };
              /** @description Object with information on the number of the number of multikills the player had */
              multi_kills?: { [key: string]: unknown };
              /** @description Object with information on where the player placed observer wards. The location takes the form (outer number, inner number) and are from ~64-192. */
              obs?: { [key: string]: unknown };
              /** @description obs_left_log */
              obs_left_log?: { [key: string]: unknown }[];
              /** @description Object containing information on when and where the player placed observer wards */
              obs_log?: { [key: string]: unknown }[];
              /** @description Total number of observer wards placed */
              obs_placed?: number;
              /** @description party_id */
              party_id?: number;
              /** @description Array describing permanent buffs the player had at the end of the game. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/permanent_buffs.json */
              permanent_buffs?: { [key: string]: unknown }[];
              /** @description Total number of pings */
              pings?: number;
              /** @description Object containing information on the items the player purchased */
              purchase?: { [key: string]: unknown };
              /** @description Object containing information on when items were purchased */
              purchase_log?: {
                /** @description Time in seconds the item was bought */
                time?: number;
                /** @description String item ID */
                key?: string;
                /** @description Integer amount of charges */
                charges?: number;
              }[];
              /** @description Number of runes picked up */
              rune_pickups?: number;
              /** @description Object with information about which runes the player picked up */
              runes?: { [key: string]: number };
              /** @description Array with information on when runes were picked up */
              runes_log?: {
                /** @description Time in seconds rune picked up */
                time?: number;
                /** @description key */
                key?: number;
              }[];
              /** @description Object with information on where sentries were placed. The location takes the form (outer number, inner number) and are from ~64-192. */
              sen?: { [key: string]: unknown };
              /** @description Array containing information on when and where the player placed sentries */
              sen_left_log?: { [key: string]: unknown }[];
              /** @description Array with information on when and where sentries were placed by the player */
              sen_log?: { [key: string]: unknown }[];
              /** @description How many sentries were placed by the player */
              sen_placed?: number;
              /** @description Total stun duration of all stuns by the player */
              stuns?: number;
              /** @description Time in seconds corresponding to the time of entries of other arrays in the match. */
              times?: number[];
              /** @description Total tower damage done by the player */
              tower_damage?: number;
              /** @description Experience Per Minute obtained by the player */
              xp_per_min?: number;
              /** @description Object containing information on the sources of this player's experience */
              xp_reasons?: { [key: string]: unknown };
              /** @description Experience at each minute of the game */
              xp_t?: number[];
              /** @description personaname */
              personaname?: string;
              /** @description name */
              name?: string;
              /**
               * Format: date-time
               * @description Time of player's last login
               */
              last_login?: string;
              /** @description Boolean indicating whether Radiant won the match */
              radiant_win?: boolean;
              /** @description Start time of the match in seconds since 1970 */
              start_time?: number;
              /** @description Duration of the game in seconds */
              duration?: number;
              /** @description cluster */
              cluster?: number;
              /** @description Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
              lobby_type?: number;
              /** @description Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
              game_mode?: number;
              /** @description Integer representing the patch the game was played on */
              patch?: number;
              /** @description Integer corresponding to the region the game was played on */
              region?: number;
              /** @description Boolean for whether or not the player is on Radiant */
              isRadiant?: boolean;
              /** @description Binary integer representing whether or not the player won */
              win?: number;
              /** @description Binary integer representing whether or not the player lost */
              lose?: number;
              /** @description Total gold at the end of the game */
              total_gold?: number;
              /** @description Total experience at the end of the game */
              total_xp?: number;
              /** @description Number of kills per minute */
              kills_per_min?: number;
              /** @description kda */
              kda?: number;
              /** @description abandons */
              abandons?: number;
              /** @description Total number of neutral creeps killed */
              neutral_kills?: number;
              /** @description Total number of tower kills the player had */
              tower_kills?: number;
              /** @description Total number of courier kills the player had */
              courier_kills?: number;
              /** @description Total number of lane creeps killed by the player */
              lane_kills?: number;
              /** @description Total number of heroes killed by the player */
              hero_kills?: number;
              /** @description Total number of observer wards killed by the player */
              observer_kills?: number;
              /** @description Total number of sentry wards killed by the player */
              sentry_kills?: number;
              /** @description Total number of roshan kills (last hit on roshan) the player had */
              roshan_kills?: number;
              /** @description Total number of Necronomicon creeps killed by the player */
              necronomicon_kills?: number;
              /** @description Total number of Ancient creeps killed by the player */
              ancient_kills?: number;
              /** @description Total number of buyback the player used */
              buyback_count?: number;
              /** @description Number of observer wards used */
              observer_uses?: number;
              /** @description Number of sentry wards used */
              sentry_uses?: number;
              /** @description lane_efficiency */
              lane_efficiency?: number;
              /** @description lane_efficiency_pct */
              lane_efficiency_pct?: number;
              /** @description Integer referring to which lane the hero laned in */
              lane?: number;
              /** @description lane_role */
              lane_role?: number;
              /** @description Boolean referring to whether or not the player roamed */
              is_roaming?: boolean;
              /** @description Object with information on when the player last purchased an item */
              purchase_time?: { [key: string]: unknown };
              /** @description Object with information on when the player first puchased an item */
              first_purchase_time?: { [key: string]: unknown };
              /** @description Object with information on whether or not the item won */
              item_win?: { [key: string]: unknown };
              /** @description Object containing binary integers the tell whether the item was purchased by the player (note: this is always 1) */
              item_usage?: { [key: string]: unknown };
              /** @description Total number of TP scrolls purchased by the player */
              purchase_tpscroll?: { [key: string]: unknown };
              /** @description Actions per minute */
              actions_per_min?: number;
              /** @description life_state_dead */
              life_state_dead?: number;
              /** @description The rank tier of the player. Tens place indicates rank, ones place indicates stars. */
              rank_tier?: number;
              /** @description cosmetics */
              cosmetics?: number[];
              /** @description Object containing information on certain benchmarks like GPM, XPM, KDA, tower damage, etc */
              benchmarks?: { [key: string]: unknown };
            }[];
            /** @description Information on the patch version the game is played on */
            patch?: number;
            /** @description Integer corresponding to the region the game was played on */
            region?: number;
            /** @description Word counts of the all chat messages in the player's games */
            all_word_counts?: { [key: string]: unknown };
            /** @description Word counts of the player's all chat messages */
            my_word_counts?: { [key: string]: unknown };
            /** @description Maximum gold advantage of the player's team if they lost the match */
            throw?: number;
            /** @description Maximum gold disadvantage of the player's team if they won the match */
            comeback?: number;
            /** @description Maximum gold disadvantage of the player's team if they lost the match */
            loss?: number;
            /** @description Maximum gold advantage of the player's team if they won the match */
            win?: number;
            /** @description replay_url */
            replay_url?: string;
          };
        };
      };
    };
  };
  "/playersByRank": {
    /** Players ordered by rank/medal tier */
    get: {
      parameters: {};
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description account_id */
            account_id?: number;
            /** @description Integer indicating the rank/medal of the player */
            rank_tier?: number;
            /** @description Indicates if we were unable to fetch full history for this player due to privacy settings */
            fh_unavailable?: boolean;
          };
        };
      };
    };
  };
  "/players/{account_id}": {
    /** Player data */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description solo_competitive_rank */
            solo_competitive_rank?: number;
            /** @description competitive_rank */
            competitive_rank?: number;
            /** @description rank_tier */
            rank_tier?: number;
            /** @description leaderboard_rank */
            leaderboard_rank?: number;
            /** @description mmr_estimate */
            mmr_estimate?: {
              /** @description estimate */
              estimate?: number;
            };
            /** @description profile */
            profile?: {
              /** @description account_id */
              account_id?: number;
              /** @description personaname */
              personaname?: string;
              /** @description name */
              name?: string;
              /** @description Boolean indicating status of current Dota Plus subscription */
              plus?: boolean;
              /** @description cheese */
              cheese?: number;
              /** @description steamid */
              steamid?: string;
              /** @description avatar */
              avatar?: string;
              /** @description avatarmedium */
              avatarmedium?: string;
              /** @description avatarfull */
              avatarfull?: string;
              /** @description profileurl */
              profileurl?: string;
              /** @description last_login */
              last_login?: string;
              /** @description loccountrycode */
              loccountrycode?: string;
              /**
               * @description Boolean indicating if the user contributed to the development of OpenDota
               * @default false
               */
              is_contributor?: boolean;
              /**
               * @description Boolean indicating if the user subscribed to OpenDota
               * @default false
               */
              is_subscriber?: boolean;
            };
          };
        };
      };
    };
  };
  "/players/{account_id}/wl": {
    /** Win/Loss count */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
        query: {
          /** Number of matches to limit to */
          limit?: number;
          /** Number of matches to offset start by */
          offset?: number;
          /** Whether the player won */
          win?: number;
          /** Patch ID */
          patch?: number;
          /** Game Mode ID */
          game_mode?: number;
          /** Lobby type ID */
          lobby_type?: number;
          /** Region ID */
          region?: number;
          /** Days previous */
          date?: number;
          /** Lane Role ID */
          lane_role?: number;
          /** Hero ID */
          hero_id?: number;
          /** Whether the player was radiant */
          is_radiant?: number;
          /** Account IDs in the match (array) */
          included_account_id?: number;
          /** Account IDs not in the match (array) */
          excluded_account_id?: number;
          /** Hero IDs on the player's team (array) */
          with_hero_id?: number;
          /** Hero IDs against the player's team (array) */
          against_hero_id?: number;
          /** Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
          significant?: number;
          /** The minimum number of games played, for filtering hero stats */
          having?: number;
          /** The field to return matches sorted by in descending order */
          sort?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Number of wins */
            win?: number;
            /** @description Number of loses */
            lose?: number;
          };
        };
      };
    };
  };
  "/players/{account_id}/recentMatches": {
    /** Recent matches played */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Match ID */
            match_id?: number;
            /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
            player_slot?: number;
            /** @description Boolean indicating whether Radiant won the match */
            radiant_win?: boolean;
            /** @description Duration of the game in seconds */
            duration?: number;
            /** @description Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
            game_mode?: number;
            /** @description Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
            lobby_type?: number;
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description Start time of the match in seconds elapsed since 1970 */
            start_time?: number;
            /** @description version */
            version?: number;
            /** @description Total kills the player had at the end of the match */
            kills?: number;
            /** @description Total deaths the player had at the end of the match */
            deaths?: number;
            /** @description Total assists the player had at the end of the match */
            assists?: number;
            /** @description Skill bracket assigned by Valve (Normal, High, Very High). If the skill is unknown, will return null. */
            skill?: number;
            /** @description Average rank of players with public match data */
            average_rank?: number;
            /** @description Experience Per Minute obtained by the player */
            xp_per_min?: number;
            /** @description Average gold per minute of the player */
            gold_per_min?: number;
            /** @description Total hero damage to enemy heroes */
            hero_damage?: number;
            /** @description Total healing of ally heroes */
            hero_healing?: number;
            /** @description Total last hits the player had at the end of the match */
            last_hits?: number;
            /** @description Integer corresponding to which lane the player laned in for the match */
            lane?: number;
            /** @description lane_role */
            lane_role?: number;
            /** @description Boolean describing whether or not the player roamed */
            is_roaming?: boolean;
            /** @description cluster */
            cluster?: number;
            /** @description Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
            leaver_status?: number;
            /** @description Size of the players party. If not in a party, will return 1. */
            party_size?: number;
          }[];
        };
      };
    };
  };
  "/players/{account_id}/matches": {
    /** Matches played */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
        query: {
          /** Number of matches to limit to */
          limit?: number;
          /** Number of matches to offset start by */
          offset?: number;
          /** Whether the player won */
          win?: number;
          /** Patch ID */
          patch?: number;
          /** Game Mode ID */
          game_mode?: number;
          /** Lobby type ID */
          lobby_type?: number;
          /** Region ID */
          region?: number;
          /** Days previous */
          date?: number;
          /** Lane Role ID */
          lane_role?: number;
          /** Hero ID */
          hero_id?: number;
          /** Whether the player was radiant */
          is_radiant?: number;
          /** Account IDs in the match (array) */
          included_account_id?: number;
          /** Account IDs not in the match (array) */
          excluded_account_id?: number;
          /** Hero IDs on the player's team (array) */
          with_hero_id?: number;
          /** Hero IDs against the player's team (array) */
          against_hero_id?: number;
          /** Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
          significant?: number;
          /** The minimum number of games played, for filtering hero stats */
          having?: number;
          /** The field to return matches sorted by in descending order */
          sort?: string;
          /** Fields to project (array) */
          project?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Match ID */
            match_id?: number;
            /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
            player_slot?: number;
            /** @description Boolean indicating whether Radiant won the match */
            radiant_win?: boolean;
            /** @description Duration of the game in seconds */
            duration?: number;
            /** @description Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
            game_mode?: number;
            /** @description Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
            lobby_type?: number;
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description Time the game started in seconds since 1970 */
            start_time?: number;
            /** @description version */
            version?: number;
            /** @description Total kills the player had at the end of the game */
            kills?: number;
            /** @description Total deaths the player had at the end of the game */
            deaths?: number;
            /** @description Total assists the player had at the end of the game */
            assists?: number;
            /** @description Skill bracket assigned by Valve (Normal, High, Very High) */
            skill?: number;
            /** @description Average rank of players with public match data */
            average_rank?: number;
            /** @description Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
            leaver_status?: number;
            /** @description Size of the player's party */
            party_size?: number;
          }[];
        };
      };
    };
  };
  "/players/{account_id}/heroes": {
    /** Heroes played */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
        query: {
          /** Number of matches to limit to */
          limit?: number;
          /** Number of matches to offset start by */
          offset?: number;
          /** Whether the player won */
          win?: number;
          /** Patch ID */
          patch?: number;
          /** Game Mode ID */
          game_mode?: number;
          /** Lobby type ID */
          lobby_type?: number;
          /** Region ID */
          region?: number;
          /** Days previous */
          date?: number;
          /** Lane Role ID */
          lane_role?: number;
          /** Hero ID */
          hero_id?: number;
          /** Whether the player was radiant */
          is_radiant?: number;
          /** Account IDs in the match (array) */
          included_account_id?: number;
          /** Account IDs not in the match (array) */
          excluded_account_id?: number;
          /** Hero IDs on the player's team (array) */
          with_hero_id?: number;
          /** Hero IDs against the player's team (array) */
          against_hero_id?: number;
          /** Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
          significant?: number;
          /** The minimum number of games played, for filtering hero stats */
          having?: number;
          /** The field to return matches sorted by in descending order */
          sort?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description The ID value of the hero played */
            hero_id?: string;
            /** @description last_played */
            last_played?: number;
            /** @description games */
            games?: number;
            /** @description win */
            win?: number;
            /** @description with_games */
            with_games?: number;
            /** @description with_win */
            with_win?: number;
            /** @description against_games */
            against_games?: number;
            /** @description against_win */
            against_win?: number;
          }[];
        };
      };
    };
  };
  "/players/{account_id}/peers": {
    /** Players played with */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
        query: {
          /** Number of matches to limit to */
          limit?: number;
          /** Number of matches to offset start by */
          offset?: number;
          /** Whether the player won */
          win?: number;
          /** Patch ID */
          patch?: number;
          /** Game Mode ID */
          game_mode?: number;
          /** Lobby type ID */
          lobby_type?: number;
          /** Region ID */
          region?: number;
          /** Days previous */
          date?: number;
          /** Lane Role ID */
          lane_role?: number;
          /** Hero ID */
          hero_id?: number;
          /** Whether the player was radiant */
          is_radiant?: number;
          /** Account IDs in the match (array) */
          included_account_id?: number;
          /** Account IDs not in the match (array) */
          excluded_account_id?: number;
          /** Hero IDs on the player's team (array) */
          with_hero_id?: number;
          /** Hero IDs against the player's team (array) */
          against_hero_id?: number;
          /** Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
          significant?: number;
          /** The minimum number of games played, for filtering hero stats */
          having?: number;
          /** The field to return matches sorted by in descending order */
          sort?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description account_id */
            account_id?: number;
            /** @description last_played */
            last_played?: number;
            /** @description win */
            win?: number;
            /** @description games */
            games?: number;
            /** @description with_win */
            with_win?: number;
            /** @description with_games */
            with_games?: number;
            /** @description against_win */
            against_win?: number;
            /** @description against_games */
            against_games?: number;
            /** @description with_gpm_sum */
            with_gpm_sum?: number;
            /** @description with_xpm_sum */
            with_xpm_sum?: number;
            /** @description personaname */
            personaname?: string;
            /** @description name */
            name?: string;
            /** @description is_contributor */
            is_contributor?: boolean;
            /** @description is_subscriber */
            is_subscriber?: boolean;
            /** @description last_login */
            last_login?: string;
            /** @description avatar */
            avatar?: string;
            /** @description avatarfull */
            avatarfull?: string;
          }[];
        };
      };
    };
  };
  "/players/{account_id}/pros": {
    /** Pro players played with */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
        query: {
          /** Number of matches to limit to */
          limit?: number;
          /** Number of matches to offset start by */
          offset?: number;
          /** Whether the player won */
          win?: number;
          /** Patch ID */
          patch?: number;
          /** Game Mode ID */
          game_mode?: number;
          /** Lobby type ID */
          lobby_type?: number;
          /** Region ID */
          region?: number;
          /** Days previous */
          date?: number;
          /** Lane Role ID */
          lane_role?: number;
          /** Hero ID */
          hero_id?: number;
          /** Whether the player was radiant */
          is_radiant?: number;
          /** Account IDs in the match (array) */
          included_account_id?: number;
          /** Account IDs not in the match (array) */
          excluded_account_id?: number;
          /** Hero IDs on the player's team (array) */
          with_hero_id?: number;
          /** Hero IDs against the player's team (array) */
          against_hero_id?: number;
          /** Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
          significant?: number;
          /** The minimum number of games played, for filtering hero stats */
          having?: number;
          /** The field to return matches sorted by in descending order */
          sort?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description account_id */
            account_id?: number;
            /** @description name */
            name?: string;
            /** @description country_code */
            country_code?: string;
            /** @description fantasy_role */
            fantasy_role?: number;
            /** @description team_id */
            team_id?: number;
            /** @description team_name */
            team_name?: string;
            /** @description team_tag */
            team_tag?: string;
            /** @description is_locked */
            is_locked?: boolean;
            /** @description is_pro */
            is_pro?: boolean;
            /** @description locked_until */
            locked_until?: number;
            /** @description steamid */
            steamid?: string;
            /** @description avatar */
            avatar?: string;
            /** @description avatarmedium */
            avatarmedium?: string;
            /** @description avatarfull */
            avatarfull?: string;
            /** @description profileurl */
            profileurl?: string;
            /**
             * Format: date-time
             * @description last_login
             */
            last_login?: string;
            /**
             * Format: date-time
             * @description full_history_time
             */
            full_history_time?: string;
            /** @description cheese */
            cheese?: number;
            /** @description fh_unavailable */
            fh_unavailable?: boolean;
            /** @description loccountrycode */
            loccountrycode?: string;
            /** @description last_played */
            last_played?: number;
            /** @description win */
            win?: number;
            /** @description games */
            games?: number;
            /** @description with_win */
            with_win?: number;
            /** @description with_games */
            with_games?: number;
            /** @description against_win */
            against_win?: number;
            /** @description against_games */
            against_games?: number;
            /** @description with_gpm_sum */
            with_gpm_sum?: number;
            /** @description with_xpm_sum */
            with_xpm_sum?: number;
          }[];
        };
      };
    };
  };
  "/players/{account_id}/totals": {
    /** Totals in stats */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
        query: {
          /** Number of matches to limit to */
          limit?: number;
          /** Number of matches to offset start by */
          offset?: number;
          /** Whether the player won */
          win?: number;
          /** Patch ID */
          patch?: number;
          /** Game Mode ID */
          game_mode?: number;
          /** Lobby type ID */
          lobby_type?: number;
          /** Region ID */
          region?: number;
          /** Days previous */
          date?: number;
          /** Lane Role ID */
          lane_role?: number;
          /** Hero ID */
          hero_id?: number;
          /** Whether the player was radiant */
          is_radiant?: number;
          /** Account IDs in the match (array) */
          included_account_id?: number;
          /** Account IDs not in the match (array) */
          excluded_account_id?: number;
          /** Hero IDs on the player's team (array) */
          with_hero_id?: number;
          /** Hero IDs against the player's team (array) */
          against_hero_id?: number;
          /** Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
          significant?: number;
          /** The minimum number of games played, for filtering hero stats */
          having?: number;
          /** The field to return matches sorted by in descending order */
          sort?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description field */
            field?: string;
            /** @description number */
            n?: number;
            /** @description sum */
            sum?: number;
          }[];
        };
      };
    };
  };
  "/players/{account_id}/counts": {
    /** Counts in categories */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
        query: {
          /** Number of matches to limit to */
          limit?: number;
          /** Number of matches to offset start by */
          offset?: number;
          /** Whether the player won */
          win?: number;
          /** Patch ID */
          patch?: number;
          /** Game Mode ID */
          game_mode?: number;
          /** Lobby type ID */
          lobby_type?: number;
          /** Region ID */
          region?: number;
          /** Days previous */
          date?: number;
          /** Lane Role ID */
          lane_role?: number;
          /** Hero ID */
          hero_id?: number;
          /** Whether the player was radiant */
          is_radiant?: number;
          /** Account IDs in the match (array) */
          included_account_id?: number;
          /** Account IDs not in the match (array) */
          excluded_account_id?: number;
          /** Hero IDs on the player's team (array) */
          with_hero_id?: number;
          /** Hero IDs against the player's team (array) */
          against_hero_id?: number;
          /** Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
          significant?: number;
          /** The minimum number of games played, for filtering hero stats */
          having?: number;
          /** The field to return matches sorted by in descending order */
          sort?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
            leaver_status?: { [key: string]: unknown };
            /** @description Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
            game_mode?: { [key: string]: unknown };
            /** @description Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
            lobby_type?: { [key: string]: unknown };
            /** @description lane_role */
            lane_role?: { [key: string]: unknown };
            /** @description Integer corresponding to the region the game was played on */
            region?: { [key: string]: unknown };
            /** @description patch */
            patch?: { [key: string]: unknown };
          };
        };
      };
    };
  };
  "/players/{account_id}/histograms/{field}": {
    /** Distribution of matches in a single stat */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
          /** Field to aggregate on */
          field: string;
        };
        query: {
          /** Number of matches to limit to */
          limit?: number;
          /** Number of matches to offset start by */
          offset?: number;
          /** Whether the player won */
          win?: number;
          /** Patch ID */
          patch?: number;
          /** Game Mode ID */
          game_mode?: number;
          /** Lobby type ID */
          lobby_type?: number;
          /** Region ID */
          region?: number;
          /** Days previous */
          date?: number;
          /** Lane Role ID */
          lane_role?: number;
          /** Hero ID */
          hero_id?: number;
          /** Whether the player was radiant */
          is_radiant?: number;
          /** Account IDs in the match (array) */
          included_account_id?: number;
          /** Account IDs not in the match (array) */
          excluded_account_id?: number;
          /** Hero IDs on the player's team (array) */
          with_hero_id?: number;
          /** Hero IDs against the player's team (array) */
          against_hero_id?: number;
          /** Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
          significant?: number;
          /** The minimum number of games played, for filtering hero stats */
          having?: number;
          /** The field to return matches sorted by in descending order */
          sort?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: { [key: string]: unknown }[];
        };
      };
    };
  };
  "/players/{account_id}/wardmap": {
    /** Wards placed in matches played */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
        query: {
          /** Number of matches to limit to */
          limit?: number;
          /** Number of matches to offset start by */
          offset?: number;
          /** Whether the player won */
          win?: number;
          /** Patch ID */
          patch?: number;
          /** Game Mode ID */
          game_mode?: number;
          /** Lobby type ID */
          lobby_type?: number;
          /** Region ID */
          region?: number;
          /** Days previous */
          date?: number;
          /** Lane Role ID */
          lane_role?: number;
          /** Hero ID */
          hero_id?: number;
          /** Whether the player was radiant */
          is_radiant?: number;
          /** Account IDs in the match (array) */
          included_account_id?: number;
          /** Account IDs not in the match (array) */
          excluded_account_id?: number;
          /** Hero IDs on the player's team (array) */
          with_hero_id?: number;
          /** Hero IDs against the player's team (array) */
          against_hero_id?: number;
          /** Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
          significant?: number;
          /** The minimum number of games played, for filtering hero stats */
          having?: number;
          /** The field to return matches sorted by in descending order */
          sort?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description obs */
            obs?: { [key: string]: unknown };
            /** @description sen */
            sen?: { [key: string]: unknown };
          };
        };
      };
    };
  };
  "/players/{account_id}/wordcloud": {
    /** Words said/read in matches played */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
        query: {
          /** Number of matches to limit to */
          limit?: number;
          /** Number of matches to offset start by */
          offset?: number;
          /** Whether the player won */
          win?: number;
          /** Patch ID */
          patch?: number;
          /** Game Mode ID */
          game_mode?: number;
          /** Lobby type ID */
          lobby_type?: number;
          /** Region ID */
          region?: number;
          /** Days previous */
          date?: number;
          /** Lane Role ID */
          lane_role?: number;
          /** Hero ID */
          hero_id?: number;
          /** Whether the player was radiant */
          is_radiant?: number;
          /** Account IDs in the match (array) */
          included_account_id?: number;
          /** Account IDs not in the match (array) */
          excluded_account_id?: number;
          /** Hero IDs on the player's team (array) */
          with_hero_id?: number;
          /** Hero IDs against the player's team (array) */
          against_hero_id?: number;
          /** Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
          significant?: number;
          /** The minimum number of games played, for filtering hero stats */
          having?: number;
          /** The field to return matches sorted by in descending order */
          sort?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description my_word_counts */
            my_word_counts?: { [key: string]: unknown };
            /** @description all_word_counts */
            all_word_counts?: { [key: string]: unknown };
          };
        };
      };
    };
  };
  "/players/{account_id}/ratings": {
    /** Player rating history */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description account_id */
            account_id?: number;
            /** @description match_id */
            match_id?: number;
            /** @description solo_competitive_rank */
            solo_competitive_rank?: number;
            /** @description competitive_rank */
            competitive_rank?: number;
            /** @description time */
            time?: number;
          }[];
        };
      };
    };
  };
  "/players/{account_id}/rankings": {
    /** Player hero rankings */
    get: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description The ID value of the hero played */
            hero_id?: string;
            /** @description hero_score */
            score?: number;
            /** @description percent_rank */
            percent_rank?: number;
            /** @description numeric_rank */
            card?: number;
          }[];
        };
      };
    };
  };
  "/players/{account_id}/refresh": {
    /** Refresh player match history */
    post: {
      parameters: {
        path: {
          /** Steam32 account ID */
          account_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/proPlayers": {
    /** Get list of pro players */
    get: {
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Player's account identifier */
            account_id?: number;
            /** @description Player's steam identifier */
            steamid?: string;
            /** @description Steam picture URL (small picture) */
            avatar?: string;
            /** @description Steam picture URL (medium picture) */
            avatarmedium?: string;
            /** @description Steam picture URL (full picture) */
            avatarfull?: string;
            /** @description Steam profile URL */
            profileurl?: string;
            /** @description Player's Steam name */
            personaname?: string;
            /**
             * Format: date-time
             * @description Date and time of last login to OpenDota
             */
            last_login?: string;
            /**
             * Format: date-time
             * @description Date and time of last request to refresh player's match history
             */
            full_history_time?: string;
            /** @description Amount of dollars the player has donated to OpenDota */
            cheese?: number;
            /** @description Whether the refresh of player' match history failed */
            fh_unavailable?: boolean;
            /** @description Player's country identifier, e.g. US */
            loccountrycode?: string;
            /** @description Verified player name, e.g. 'Miracle-' */
            name?: string;
            /** @description Player's country code */
            country_code?: string;
            /** @description Player's ingame role (core: 1 or support: 2) */
            fantasy_role?: number;
            /** @description Player's team identifier */
            team_id?: number;
            /** @description Player's team name, e.g. 'Evil Geniuses' */
            team_name?: string;
            /** @description Player's team shorthand tag, e.g. 'EG' */
            team_tag?: string;
            /** @description Whether the roster lock is active */
            is_locked?: boolean;
            /** @description Whether the player is professional or not */
            is_pro?: boolean;
            /** @description When the roster lock will end */
            locked_until?: number;
          }[];
        };
      };
    };
  };
  "/proMatches": {
    /** Get list of pro matches */
    get: {
      parameters: {
        query: {
          /** Get matches with a match ID lower than this value */
          less_than_match_id?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Used to identify individual matches, e.g. 3703866531 */
            match_id?: number;
            /** @description Length of the match */
            duration?: number;
            /** @description Unix timestamp of when the match began */
            start_time?: number;
            /** @description The Radiant's team_id */
            radiant_team_id?: number;
            /** @description The Radiant's team name */
            radiant_name?: string;
            /** @description The Dire's team_id */
            dire_team_id?: number;
            /** @description The Dire's team name */
            dire_name?: string;
            /** @description Identifier for the league the match took place in */
            leagueid?: number;
            /** @description Name of league the match took place in */
            league_name?: string;
            /** @description Identifier for the series of the match */
            series_id?: number;
            /** @description Type of series the match was */
            series_type?: number;
            /** @description Number of kills the Radiant team had when the match ended */
            radiant_score?: number;
            /** @description Number of kills the Dire team had when the match ended */
            dire_score?: number;
            /** @description Whether or not the Radiant won the match */
            radiant_win?: boolean;
            /** @description Whether the team/player/hero was on Radiant */
            radiant?: boolean;
          }[];
        };
      };
    };
  };
  "/publicMatches": {
    /** Get list of randomly sampled public matches */
    get: {
      parameters: {
        query: {
          /** Order by MMR ascending */
          mmr_ascending?: number;
          /** Order by MMR descending */
          mmr_descending?: number;
          /** Get matches with a match ID lower than this value */
          less_than_match_id?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description match_id */
            match_id?: number;
            /** @description match_seq_num */
            match_seq_num?: number;
            /** @description Boolean indicating whether Radiant won the match */
            radiant_win?: boolean;
            /** @description start_time */
            start_time?: number;
            /** @description Duration of the game in seconds */
            duration?: number;
            /** @description radiant_team */
            radiant_team?: string;
            /** @description dire_team */
            dire_team?: string;
          }[];
        };
      };
    };
  };
  "/parsedMatches": {
    /** Get list of parsed match IDs */
    get: {
      parameters: {
        query: {
          /** Get matches with a match ID lower than this value */
          less_than_match_id?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description match_id */
            match_id?: number;
          }[];
        };
      };
    };
  };
  "/explorer": {
    /** Submit arbitrary SQL queries to the database */
    get: {
      parameters: {
        query: {
          /** The PostgreSQL query as percent-encoded string. */
          sql?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/metadata": {
    /** Site metadata */
    get: {
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description banner */
            banner?: { [key: string]: unknown };
          };
        };
      };
    };
  };
  "/distributions": {
    /** Distributions of MMR data by bracket and country */
    get: {
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description ranks */
            ranks?: {
              /** @description command */
              commmand?: string;
              /** @description rowCount */
              rowCount?: number;
              /** @description rows */
              rows?: {
                /** @description bin */
                bin?: number;
                /** @description bin_name */
                bin_name?: number;
                /** @description count */
                count?: number;
                /** @description cumulative_sum */
                cumulative_sum?: number;
              }[];
              /** @description fields */
              fields?: {
                /** @description name */
                name?: string;
                /** @description tableID */
                tableID?: number;
                /** @description columnID */
                columnID?: number;
                /** @description dataTypeID */
                dataTypeID?: number;
                /** @description dataTypeSize */
                dataTypeSize?: number;
                /** @description dataTypeModifier */
                dataTypeModifier?: string;
                /** @description format */
                format?: string;
              }[];
              /** @description rowAsArray */
              rowAsArray?: boolean;
              /** @description sum */
              sum?: {
                /** @description count */
                count?: number;
              };
            };
            /** @description mmr */
            mmr?: {
              /** @description command */
              commmand?: string;
              /** @description rowCount */
              rowCount?: number;
              /** @description rows */
              rows?: {
                /** @description bin */
                bin?: number;
                /** @description bin_name */
                bin_name?: number;
                /** @description count */
                count?: number;
                /** @description cumulative_sum */
                cumulative_sum?: number;
              }[];
              /** @description fields */
              fields?: {
                /** @description name */
                name?: string;
                /** @description tableID */
                tableID?: number;
                /** @description columnID */
                columnID?: number;
                /** @description dataTypeID */
                dataTypeID?: number;
                /** @description dataTypeSize */
                dataTypeSize?: number;
                /** @description dataTypeModifier */
                dataTypeModifier?: string;
                /** @description format */
                format?: string;
              }[];
              /** @description rowAsArray */
              rowAsArray?: boolean;
              /** @description sum */
              sum?: {
                /** @description count */
                count?: number;
              };
            };
            /** @description country_mmr */
            country_mmr?: {
              /** @description command */
              commmand?: string;
              /** @description rowCount */
              rowCount?: number;
              /** @description rows */
              rows?: {
                /** @description loccountrycode */
                loccountrycode?: string;
                /** @description count */
                count?: number;
                /** @description avg */
                avg?: string;
                /** @description common */
                common?: string;
              }[];
              /** @description fields */
              fields?: {
                /** @description name */
                name?: string;
                /** @description tableID */
                tableID?: number;
                /** @description columnID */
                columnID?: number;
                /** @description dataTypeID */
                dataTypeID?: number;
                /** @description dataTypeSize */
                dataTypeSize?: number;
                /** @description dataTypeModifier */
                dataTypeModifier?: number;
                /** @description format */
                format?: string;
              }[];
              /** @description rowAsArray */
              rowAsArray?: boolean;
            };
          };
        };
      };
    };
  };
  "/search": {
    /** Search players by personaname. */
    get: {
      parameters: {
        query: {
          /** Search string */
          q: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description account_id */
            account_id?: number;
            /** @description avatarfull */
            avatarfull?: string;
            /** @description personaname */
            personaname?: string;
            /** @description last_match_time. May not be present or null. */
            last_match_time?: string;
            /** @description similarity */
            similarity?: number;
          }[];
        };
      };
    };
  };
  "/rankings": {
    /** Top players by hero */
    get: {
      parameters: {
        query: {
          /** Hero ID */
          hero_id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description rankings */
            rankings?: {
              /** @description account_id */
              account_id?: number;
              /** @description score */
              score?: string;
              /** @description steamid */
              steamid?: string;
              /** @description avatar */
              avatar?: string;
              /** @description avatarmedium */
              avatarmedium?: string;
              /** @description avatarfull */
              avatarfull?: string;
              /** @description profileurl */
              profileurl?: string;
              /** @description personaname */
              personaname?: string;
              /**
               * Format: date-time
               * @description last_login
               */
              last_login?: string;
              /**
               * Format: date-time
               * @description full_history_time
               */
              full_history_time?: string;
              /** @description cheese */
              cheese?: number;
              /** @description fh_unavailable */
              fh_unavailable?: boolean;
              /** @description loccountrycode */
              loccountrycode?: string;
              /** @description rank_tier */
              rank_tier?: number;
            };
          };
        };
      };
    };
  };
  "/benchmarks": {
    /** Benchmarks of average stat values for a hero */
    get: {
      parameters: {
        query: {
          /** Hero ID */
          hero_id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description result */
            result?: {
              gold_per_min?: {
                /** @description percentile */
                percentile?: number;
                /** @description value */
                value?: number;
              }[];
              xp_per_min?: {
                /** @description percentile */
                percentile?: number;
                /** @description value */
                value?: number;
              }[];
              kills_per_min?: {
                /** @description percentile */
                percentile?: number;
                /** @description value */
                value?: number;
              }[];
              last_hits_per_min?: {
                /** @description percentile */
                percentile?: number;
                /** @description value */
                value?: number;
              }[];
              hero_damage_per_min?: {
                /** @description percentile */
                percentile?: number;
                /** @description value */
                value?: number;
              }[];
              hero_healing_per_min?: {
                /** @description percentile */
                percentile?: number;
                /** @description value */
                value?: number;
              }[];
              tower_damage?: {
                /** @description percentile */
                percentile?: number;
                /** @description value */
                value?: number;
              }[];
            };
          };
        };
      };
    };
  };
  "/status": {
    /** Get current service statistics */
    get: {
      responses: {
        /** Success */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/health": {
    /** Get service health data */
    get: {
      responses: {
        /** Success */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/request/{jobId}": {
    /** Get parse request state */
    get: {
      parameters: {
        path: {
          /** The job ID to query. */
          jobId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/request/{match_id}": {
    /** Submit a new parse request */
    post: {
      parameters: {
        path: {
          match_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/findMatches": {
    /** Finds recent matches by heroes played */
    get: {
      parameters: {
        query: {
          /** Hero IDs on first team (array) */
          teamA?: number;
          /** Hero IDs on second team (array) */
          teamB?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/heroes": {
    /** Get hero data */
    get: {
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Numeric identifier for the hero object */
            id?: number;
            /** @description Dota hero command name, e.g. 'npc_dota_hero_antimage' */
            name?: string;
            /** @description Hero name, e.g. 'Anti-Mage' */
            localized_name?: string;
            /** @description Hero primary shorthand attribute name, e.g. 'agi' */
            primary_attr?: string;
            /** @description Hero attack type, either 'Melee' or 'Ranged' */
            attack_type?: string;
            roles?: string[];
          }[];
        };
      };
    };
  };
  "/heroStats": {
    /** Get stats about hero performance in recent matches */
    get: {
      parameters: {};
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description id */
            id?: number;
            /** @description name */
            name?: string;
            /** @description localized_name */
            localized_name?: string;
            /** @description img */
            img?: string;
            /** @description icon */
            icon?: string;
            /** @description pro_win */
            pro_win?: number;
            /** @description pro_pick */
            pro_pick?: number;
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description pro_ban */
            pro_ban?: number;
            /** @description Herald picks */
            "1_pick"?: number;
            /** @description Herald wins */
            "1_win"?: number;
            /** @description Guardian picks */
            "2_pick"?: number;
            /** @description Guardian wins */
            "2_win"?: number;
            /** @description Crusader picks */
            "3_pick"?: number;
            /** @description Crusader wins */
            "3_win"?: number;
            /** @description Archon picks */
            "4_pick"?: number;
            /** @description Archon wins */
            "4_win"?: number;
            /** @description Legend picks */
            "5_pick"?: number;
            /** @description Legend wins */
            "5_win"?: number;
            /** @description Ancient picks */
            "6_pick"?: number;
            /** @description Ancient wins */
            "6_win"?: number;
            /** @description Divine picks */
            "7_pick"?: number;
            /** @description Divine wins */
            "7_win"?: number;
            /** @description Immortal picks */
            "8_pick"?: number;
            /** @description Immortal wins */
            "8_win"?: number;
            /** @description Picks in Turbo mode this month */
            turbo_pick?: number;
            /** @description Wins in Turbo mode this month */
            turbo_win?: number;
          }[];
        };
      };
    };
  };
  "/heroes/{hero_id}/matches": {
    /** Get recent matches with a hero */
    get: {
      parameters: {
        path: {
          /** Hero ID */
          hero_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Used to identify individual matches, e.g. 3703866531 */
            match_id?: number;
            /** @description Length of the match */
            duration?: number;
            /** @description Unix timestamp of when the match began */
            start_time?: number;
            /** @description The Radiant's team_id */
            radiant_team_id?: number;
            /** @description The Radiant's team name */
            radiant_name?: string;
            /** @description The Dire's team_id */
            dire_team_id?: number;
            /** @description The Dire's team name */
            dire_name?: string;
            /** @description Identifier for the league the match took place in */
            leagueid?: number;
            /** @description Name of league the match took place in */
            league_name?: string;
            /** @description Identifier for the series of the match */
            series_id?: number;
            /** @description Type of series the match was */
            series_type?: number;
            /** @description Number of kills the Radiant team had when the match ended */
            radiant_score?: number;
            /** @description Number of kills the Dire team had when the match ended */
            dire_score?: number;
            /** @description Whether or not the Radiant won the match */
            radiant_win?: boolean;
            /** @description Whether the team/player/hero was on Radiant */
            radiant?: boolean;
          }[];
        };
      };
    };
  };
  "/heroes/{hero_id}/matchups": {
    /** Get results against other heroes for a hero */
    get: {
      parameters: {
        path: {
          /** Hero ID */
          hero_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Numeric identifier for the hero object */
            hero_id?: number;
            /** @description Number of games played */
            games_played?: number;
            /** @description Number of games won */
            wins?: number;
          }[];
        };
      };
    };
  };
  "/heroes/{hero_id}/durations": {
    /** Get hero performance over a range of match durations */
    get: {
      parameters: {
        path: {
          /** Hero ID */
          hero_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Lower bound of number of seconds the match lasted */
            duration_bin?: string;
            /** @description Number of games played */
            games_played?: number;
            /** @description Number of wins */
            wins?: number;
          }[];
        };
      };
    };
  };
  "/heroes/{hero_id}/players": {
    /** Get players who have played this hero */
    get: {
      parameters: {
        path: {
          /** Hero ID */
          hero_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Player's account identifier */
            account_id?: number;
            /** @description Player's steam identifier */
            steamid?: string;
            /** @description Steam picture URL (small picture) */
            avatar?: string;
            /** @description Steam picture URL (medium picture) */
            avatarmedium?: string;
            /** @description Steam picture URL (full picture) */
            avatarfull?: string;
            /** @description Steam profile URL */
            profileurl?: string;
            /** @description Player's Steam name */
            personaname?: string;
            /**
             * Format: date-time
             * @description Date and time of last login to OpenDota
             */
            last_login?: string;
            /**
             * Format: date-time
             * @description Date and time of last request to refresh player's match history
             */
            full_history_time?: string;
            /** @description Amount of dollars the player has donated to OpenDota */
            cheese?: number;
            /** @description Whether the refresh of player' match history failed */
            fh_unavailable?: boolean;
            /** @description Player's country identifier, e.g. US */
            loccountrycode?: string;
            /** @description Verified player name, e.g. 'Miracle-' */
            name?: string;
            /** @description Player's country code */
            country_code?: string;
            /** @description Player's ingame role (core: 1 or support: 2) */
            fantasy_role?: number;
            /** @description Player's team identifier */
            team_id?: number;
            /** @description Player's team name, e.g. 'Evil Geniuses' */
            team_name?: string;
            /** @description Player's team shorthand tag, e.g. 'EG' */
            team_tag?: string;
            /** @description Whether the roster lock is active */
            is_locked?: boolean;
            /** @description Whether the player is professional or not */
            is_pro?: boolean;
            /** @description When the roster lock will end */
            locked_until?: number;
          }[][];
        };
      };
    };
  };
  "/heroes/{hero_id}/itemPopularity": {
    /** Get item popularity of hero categoried by start, early, mid and late game, analyzed from professional games */
    get: {
      parameters: {
        path: {
          /** Hero ID */
          hero_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Items bought before game started */
            start_game_items?: {
              /** @description Number of item bought */
              item?: number;
            };
            /** @description Items bought in the first 10 min of the game, with cost at least 700 */
            early_game_items?: {
              /** @description Number of item bought */
              item?: number;
            };
            /** @description Items bought between 10 and 25 min of the game, with cost at least 2000 */
            mid_game_items?: {
              /** @description Number of item bought */
              item?: number;
            };
            /** @description Items bought at least 25 min after game started, with cost at least 4000 */
            late_game_items?: {
              /** @description Number of item bought */
              item?: number;
            };
          };
        };
      };
    };
  };
  "/leagues": {
    /** Get league data */
    get: {
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description leagueid */
            leagueid?: number;
            /** @description ticket */
            ticket?: string;
            /** @description banner */
            banner?: string;
            /** @description tier */
            tier?: string;
            /** @description name */
            name?: string;
          }[];
        };
      };
    };
  };
  "/leagues/{league_id}": {
    /** Get data for a league */
    get: {
      parameters: {
        path: {
          /** League ID */
          league_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description leagueid */
            leagueid?: number;
            /** @description ticket */
            ticket?: string;
            /** @description banner */
            banner?: string;
            /** @description tier */
            tier?: string;
            /** @description name */
            name?: string;
          }[];
        };
      };
    };
  };
  "/leagues/{league_id}/matches": {
    /** Get matches for a team */
    get: {
      parameters: {
        path: {
          /** League ID */
          league_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Used to identify individual matches, e.g. 3703866531 */
            match_id?: number;
            /** @description Length of the match */
            duration?: number;
            /** @description Unix timestamp of when the match began */
            start_time?: number;
            /** @description The Radiant's team_id */
            radiant_team_id?: number;
            /** @description The Radiant's team name */
            radiant_name?: string;
            /** @description The Dire's team_id */
            dire_team_id?: number;
            /** @description The Dire's team name */
            dire_name?: string;
            /** @description Identifier for the league the match took place in */
            leagueid?: number;
            /** @description Name of league the match took place in */
            league_name?: string;
            /** @description Identifier for the series of the match */
            series_id?: number;
            /** @description Type of series the match was */
            series_type?: number;
            /** @description Number of kills the Radiant team had when the match ended */
            radiant_score?: number;
            /** @description Number of kills the Dire team had when the match ended */
            dire_score?: number;
            /** @description Whether or not the Radiant won the match */
            radiant_win?: boolean;
            /** @description Whether the team/player/hero was on Radiant */
            radiant?: boolean;
          };
        };
      };
    };
  };
  "/leagues/{league_id}/teams": {
    /** Get teams for a league */
    get: {
      parameters: {
        path: {
          /** League ID */
          league_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Team's identifier */
            team_id?: number;
            /** @description The Elo rating of the team */
            rating?: number;
            /** @description The number of games won by this team */
            wins?: number;
            /** @description The number of losses by this team */
            losses?: number;
            /** @description The Unix timestamp of the last match played by this team */
            last_match_time?: number;
            /** @description Team name, eg. 'Newbee' */
            name?: string;
            /** @description The team tag/abbreviation */
            tag?: string;
          };
        };
      };
    };
  };
  "/teams": {
    /** Get team data */
    get: {
      parameters: {
        query: {
          /** Page number, zero indexed. Each page returns up to 1000 entries. */
          page?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Team's identifier */
            team_id?: number;
            /** @description The Elo rating of the team */
            rating?: number;
            /** @description The number of games won by this team */
            wins?: number;
            /** @description The number of losses by this team */
            losses?: number;
            /** @description The Unix timestamp of the last match played by this team */
            last_match_time?: number;
            /** @description Team name, eg. 'Newbee' */
            name?: string;
            /** @description The team tag/abbreviation */
            tag?: string;
          }[];
        };
      };
    };
  };
  "/teams/{team_id}": {
    /** Get data for a team */
    get: {
      parameters: {
        path: {
          /** Team ID */
          team_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Team's identifier */
            team_id?: number;
            /** @description The Elo rating of the team */
            rating?: number;
            /** @description The number of games won by this team */
            wins?: number;
            /** @description The number of losses by this team */
            losses?: number;
            /** @description The Unix timestamp of the last match played by this team */
            last_match_time?: number;
            /** @description Team name, eg. 'Newbee' */
            name?: string;
            /** @description The team tag/abbreviation */
            tag?: string;
          };
        };
      };
    };
  };
  "/teams/{team_id}/matches": {
    /** Get matches for a team */
    get: {
      parameters: {
        path: {
          /** Team ID */
          team_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Used to identify individual matches, e.g. 3703866531 */
            match_id?: number;
            /** @description Whether the team/player/hero was on Radiant */
            radiant?: boolean;
            /** @description Whether or not the Radiant won the match */
            radiant_win?: boolean;
            /** @description Number of kills the Radiant team had when the match ended */
            radiant_score?: number;
            /** @description Number of kills the Dire team had when the match ended */
            dire_score?: number;
            /** @description Length of the match */
            duration?: number;
            /** @description Unix timestamp of when the match began */
            start_time?: number;
            /** @description Identifier for the league the match took place in */
            leagueid?: number;
            /** @description Name of league the match took place in */
            league_name?: string;
            /** @description cluster */
            cluster?: number;
            /** @description Opposing team identifier */
            opposing_team_id?: number;
            /** @description Opposing team name, e.g. 'Evil Geniuses' */
            opposing_team_name?: string;
            /** @description Opposing team logo url */
            opposing_team_logo?: string;
          };
        };
      };
    };
  };
  "/teams/{team_id}/players": {
    /** Get players who have played for a team */
    get: {
      parameters: {
        path: {
          /** Team ID */
          team_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description The player account ID */
            account_id?: string;
            /** @description The player name */
            name?: string;
            /** @description Number of games played */
            games_played?: number;
            /** @description Number of wins */
            wins?: number;
            /** @description If this player is on the current roster */
            is_current_team_member?: boolean;
          };
        };
      };
    };
  };
  "/teams/{team_id}/heroes": {
    /** Get heroes for a team */
    get: {
      parameters: {
        path: {
          /** Team ID */
          team_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description The hero ID */
            hero_id?: number;
            /** @description The hero name */
            name?: string;
            /** @description Number of games played */
            games_played?: number;
            /** @description Number of wins */
            wins?: number;
          };
        };
      };
    };
  };
  "/replays": {
    /** Get data to construct a replay URL with */
    get: {
      parameters: {
        query: {
          /** Match IDs (array) */
          match_id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description match_id */
            match_id?: number;
            /** @description cluster */
            cluster?: number;
            /** @description replay_salt */
            replay_salt?: number;
          }[];
        };
      };
    };
  };
  "/records/{field}": {
    /** Get top performances in a stat */
    get: {
      parameters: {
        path: {
          /** Field name to query */
          field: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description match_id */
            match_id?: number;
            /** @description start_time */
            start_time?: number;
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description score */
            score?: number;
          }[];
        };
      };
    };
  };
  "/live": {
    /** Get top currently ongoing live games */
    get: {
      parameters: {};
      responses: {
        /** Success */
        200: {
          schema: { [key: string]: unknown }[];
        };
      };
    };
  };
  "/scenarios/itemTimings": {
    /** Win rates for certain item timings on a hero for items that cost at least 1400 gold */
    get: {
      parameters: {
        query: {
          /** Filter by item name e.g. "spirit_vessel" */
          item?: string;
          /** Hero ID */
          hero_id?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Hero ID */
            hero_id?: number;
            /** @description Purchased item */
            item?: string;
            /** @description Ingame time in seconds before the item was purchased */
            time?: number;
            /** @description The number of games where the hero bought this item before this time */
            games?: string;
            /** @description The number of games won where the hero bought this item before this time */
            wins?: string;
          }[];
        };
      };
    };
  };
  "/scenarios/laneRoles": {
    /** Win rates for heroes in certain lane roles */
    get: {
      parameters: {
        query: {
          /** Filter by lane role 1-4 (Safe, Mid, Off, Jungle) */
          lane_role?: string;
          /** Hero ID */
          hero_id?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description Hero ID */
            hero_id?: number;
            /** @description The hero's lane role */
            lane_role?: number;
            /** @description Maximum game length in seconds */
            time?: number;
            /** @description The number of games where the hero played in this lane role */
            games?: string;
            /** @description The number of games won where the hero played in this lane role */
            wins?: string;
          }[];
        };
      };
    };
  };
  "/scenarios/misc": {
    /** Miscellaneous team scenarios */
    get: {
      parameters: {
        query: {
          /** pos_chat_1min,neg_chat_1min,courier_kill,first_blood */
          scenario?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description The scenario's name or description */
            scenario?: string;
            /** @description Boolean indicating whether Radiant executed this scenario */
            is_radiant?: boolean;
            /** @description Region the game was played in */
            region?: number;
            /** @description The number of games where this scenario occurred */
            games?: string;
            /** @description The number of games won where this scenario occured */
            wins?: string;
          }[];
        };
      };
    };
  };
  "/schema": {
    /** Get database schema */
    get: {
      parameters: {};
      responses: {
        /** Success */
        200: {
          schema: {
            /** @description table_name */
            table_name?: string;
            /** @description column_name */
            column_name?: string;
            /** @description data_type */
            data_type?: string;
          }[];
        };
      };
    };
  };
  "/constants/{resource}": {
    /** Get static game data mirrored from the dotaconstants repository. */
    get: {
      parameters: {
        path: {
          /** Resource name e.g. `heroes`. [List of resources](https://github.com/odota/dotaconstants/tree/master/build) */
          resource: string;
        };
      };
      responses: {
        /** Success */
        200: {
          schema: unknown[];
        };
      };
    };
  };
  "/constants": {
    /** Gets an array of available resources. */
    get: {
      parameters: {};
      responses: {
        /** Success */
        200: {
          schema: string[];
        };
      };
    };
  };
}

export interface operations {}

export interface external {}
